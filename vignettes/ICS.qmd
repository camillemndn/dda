---
title: Outlier detection using ICS and climate change in Vietnam
vignette: >
  %\VignetteIndexEntry{Outlier detection using ICS and climate change in Vietnam}
  %\VignetteEngine{quarto::html}
  %\VignetteEncoding{UTF-8}
lightbox: true
toc: true
---

```{r, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>",
  warning = FALSE,
  dpi = 300,
  fig.height = 10,
  fig.width = 15,
  fig.ext = "jpg",
  dev = "jpeg",
  dev.args = list(bg = "white")
)

library(ggplot2)
theme_set(theme_minimal(base_size = 16))
theme_legend_inside <- theme(
  legend.position = "inside",
  legend.position.inside = c(.05, .95),
  legend.justification = c("left", "top"),
  legend.box.just = "left",
  legend.margin = margin(6, 6, 6, 6)
)
theme_legend_inside_right <- theme(
  legend.position = "inside",
  legend.position.inside = c(.95, .95),
  legend.justification = c("right", "top"),
  legend.box.just = "right",
  legend.margin = margin(6, 6, 6, 6)
)
```

```{r setup, message = FALSE}
library(dda)
library(tidyverse)
library(sf)
library(fdaoutlier)
library(DeBoinR)
library(tf)
if (!require(tidyfun)) {
  remotes::install_github("tidyfun/tidyfun")
  library(tidyfun)
}
set.seed(0)
```


# 4 years, 2 regions and 2 outliers (28 provinces)

In this toy example, we filter the dataset on Vietnam temperature to
consider only the two northern regions and two provinces from
the south, from 2013 to 2016, for a total of 112 observations.
The aim is to study the influence of the preprocessing parameters.

## Data presentation

```{r fig-north_south_map}
#| fig-cap: Map of Vietnam showing the 63 provinces, color-coded by region. The 28 provinces included in the toy example are labeled.

data(vietnam_provinces)
data(vietnam_regions)

vietnam_provinces |>
  mutate(
    province = if_else(region %in% c("NMM", "RRD") | province %in% c("ANGIANG", "BACLIEU"), province, NA),
    region = if_else(region %in% c("NMM", "RRD", "MDR"), region, NA)
  ) |>
  left_join(vietnam_regions, by = c("region" = "code")) |>
  select(!region) |>
  rename(region = name) |>
  ggplot(aes(fill = region, label = province)) +
  geom_sf() +
  geom_sf_label(fill = "white", size = 3) +
  scale_fill_discrete(na.translate = FALSE) +
  scale_x_continuous(breaks = seq(from = -180, to = 180, by = 2)) +
  labs(x = "longitude", y = "latitude")
```

```{r fig-north_south}
#| fig-cap:
#|  - Densities of maximum temperature over 28 provinces of Vietnam and during the years 2013-2016, color-coded by region.
#|  - Centred log-ratio transforms of the centred densities of maximum temperature over 28 provinces of Vietnam and during the years 2013-2016, color-coded by region.
#|  - Centred log-ratio transforms of the densities of maximum temperature over 28 provinces of Vietnam and during the years 2013-2016. The case of LAICHAU.
#| fig-width: 7.5
#| fig-height: 5
#| layout-ncol: 2

# Filter the data set
data(vietnam_temperature)
selected_years <- 2013:2016

vnt <- vietnam_temperature |>
  filter(year %in% selected_years) |>
  filter(region %in% c("NMM", "RRD") | province %in% c("ANGIANG", "BACLIEU")) |>
  left_join(vietnam_regions, by = c("region" = "code")) |>
  select(!region) |>
  rename(region = name) |>
  arrange(region, province)

vnts <- vnt |>
  mutate(t_max = as_dd(t_max,
    lambda = 1, nbasis = 12, mc.cores = 12
  ))

vnts |>
  plot_funs(t_max, color = region) +
  theme_legend_inside +
  labs(x = "temperature (deg. Celsius)", y = "density")

vnts |>
  mutate(t_max = as.fd(center(t_max))) |>
  plot_funs(t_max, color = region) +
  theme(legend.position = "none") +
  labs(x = "temperature (deg. Celsius)", y = "centred clr(density)")

vnts |>
  mutate(
    t_max = as.fd(t_max),
    year = ifelse(province == "LAICHAU", year, "not LAICHAU"),
    alpha = ifelse(province == "LAICHAU", 1, 0.85)
  ) |>
  plot_funs(t_max, color = year, alpha = alpha) +
  labs(x = "temperature (deg. Celsius)", y = "clr(density)") +
  guides(alpha = "none")
```

## Influence of the preprocessing parameters

Let us create a grid of parameters and
define the function to call for each parameter.

```{r ics_grid}
smooth_ICS <- function(vnt, knots_pos, nknots, lambda, index) {
  vnts <- vnt |>
    mutate(t_max = as_dd(t_max,
      lambda = lambda, nbasis = 5 + nknots,
      mc.cores = parallel::detectCores() - 1, knots_pos = knots_pos
    ))
  knots_pos_str <- ifelse(knots_pos == "quantiles",
    "Knots at quantiles", "Equally spaced knots"
  )
  index_str <- ifelse(is.na(index), "Auto selection of components",
    paste("# of components:", index)
  )

  print(paste(
    "# of knots:", nknots, "|",
    "log10(lambda):", log10(lambda), "|",
    knots_pos_str, "|",
    index_str
  ))

  if (is.na(index)) {
    list(
      dd = vnts$t_max,
      ics = tryCatch(ICS(as.fd(vnts$t_max)), error = function(e) e),
      ics_out = tryCatch(ICS_outlier(as.fd(vnts$t_max),
        n_cores = parallel::detectCores() - 1
      ), error = function(e) e)
    )
  } else {
    list(
      dd = vnts$t_max,
      ics = tryCatch(ICS(as.fd(vnts$t_max)), error = function(e) e),
      ics_out = tryCatch(ICS_outlier(as.fd(vnts$t_max),
        n_cores = parallel::detectCores() - 1, index = seq_len(index)
      ), error = function(e) e)
    )
  }
}
```

```{r tbl-north_south_grid}
#| tbl-cap: Dimensions of the grid of preprocessing parameters.

knots_pos_seq <- c("quantiles", "equally spaced")
nknots_seq <- c(5:19, seq(20, 40, 10)) - 5
lambda_seq <- 10^(-8:8)
index_seq <- 4

param_grid <- expand.grid(
  knots_pos = knots_pos_seq,
  nknots = nknots_seq,
  lambda = lambda_seq,
  index = index_seq
) |>
  arrange(nknots, knots_pos, lambda)

knitr::kable(
  tibble(
    `# of knots positions` = length(knots_pos_seq),
    `# of # of knots` = length(nknots_seq),
    `# of values for lambda` = length(lambda_seq),
    `# of # of components` = length(lambda_seq),
    `# of values for index` = length(index_seq),
    `Total grid size` = nrow(param_grid)
  )
)

if (!file.exists("ICS_north_south_outliers.RData") && !file.exists("ICS_north_south.RData")) {
  system.time(
    ics_grid <- param_grid |>
      mutate(id = seq_len(n())) |>
      rowwise() |>
      mutate(res = list(smooth_ICS(vnt, knots_pos, nknots, lambda, index)))
  )
  save(ics_grid, file = "ICS_north_south.RData")
}

if (!file.exists("ICS_north_south_outliers.RData")) {
  load("ICS_north_south.RData")

  ics_grid_out <- ics_grid |>
    rowwise() |>
    filter(!(any(class(res$ics_out) == "error"))) |>
    mutate(res = list(data.frame(
      obs_id = seq_len(length((res$ics_out$outliers))),
      outlying = res$ics_out$outliers == 1,
      distance = res$ics_out$ics_distances
    ))) |>
    unnest(res)

  save(ics_grid_out, file = "ICS_north_south_outliers.RData")
}

load("ICS_north_south_outliers.RData")
```

```{r fig-north_south_grid_outliers}
#| fig-cap: "Outlier detection using ICS on 28 provinces of Vietnam, during the years 2013-2016, over a grid of preprocessing parameters. Columns correspond to the number of inside knots (0-35)."

ics_grid_out |>
  left_join(vnt |> mutate(obs_id = row_number()), by = c("obs_id")) |>
  filter(nknots %% 2 == 0 | nknots > 20) |>
  mutate(region = str_wrap(region, 25)) |>
  ggplot(aes(log10(lambda), obs_id, fill = region, alpha = outlying)) +
  geom_tile() +
  facet_grid(cols = vars(nknots), rows = vars(knots_pos)) +
  labs(y = "observation index")
```

```{r tbl-north_south_grid_summary}
#| tbl-cap: Frequency of outlier detection using ICS on 28 provinces of Vietnam, during the years 2013-2016, over a grid of preprocessing parameters.

ics_grid_summary <- ics_grid_out |>
  mutate(outlying = ifelse(outlying, 1, 0)) |>
  group_by(obs_id) |>
  summarise(n_outlying = sum(outlying), mean_distance = mean(distance)) |>
  left_join(vnt |> mutate(obs_id = row_number()), by = c("obs_id")) |>
  select(obs_id, region, province, year, n_outlying, mean_distance)

rmarkdown::paged_table(ics_grid_summary)
```

```{r fig-north_south_grid_summary}
#| fig-cap: Summary of outlier detection using ICS on 28 provinces of Vietnam, during the years 2013-2016, over a grid of preprocessing parameters.

ics_grid_summary |>
  ggplot(aes(obs_id, n_outlying, fill = region)) +
  geom_bar(stat = "identity") +
  theme_legend_inside_right +
  labs(x = "observation index", y = "outlier detection frequency")

ics_grid_summary |>
  ggplot(aes(obs_id, mean_distance, fill = region)) +
  geom_bar(stat = "identity") +
  theme_legend_inside_right +
  labs(x = "observation index", y = "mean ICS distance")
```

```{r north_south_errors, include = FALSE, eval = FALSE}
ics_err <- ics_grid |>
  rowwise() |>
  mutate(ics_out = list(res$ics_out), dd = list(res$dd)) |>
  filter(any(class(ics_out) == "error")) |>
  mutate(message = case_when(
    grepl("socket", ics_out$message) ~ "socket",
    grepl("missing values", ics_out$message) ~ "collinearity",
    grepl("as.fd", ics_out$message) ~ "preprocessing",
    .default = "other"
  )) |>
  arrange(knots_pos, nknots, lambda)

ics_prob_err <- ics_grid_out |>
  mutate(outlying = ifelse(outlying == 1, 1, 0)) |>
  group_by(id) |>
  summarise(n_outlying = sum(outlying)) |>
  arrange(desc(n_outlying))

res <- ics_grid |>
  filter(nknots < 10) |>
  filter(nknots == 4 & lambda == 1e8 & knots_pos == "quantiles") |>
  sample_n(1)

ics_out1 <- res$res[[1]]$ics_out

ics_out2 <- ICS_outlier(as.fd(res$res[[1]]$dd), index = 1:4, n_cores = 14)
all(ics_out1$outliers == ics_out2$outliers)
plot(ics_out1)

qr(cov(t(to_zbsplines(c(res$res[[1]]$dd)))))
eigen(cov(t(to_zbsplines(c(res$res[[1]]$dd)))))$values
```


# 30 years, 1 climate region (13 provinces)

## Data presentation

```{r fig-climate_regions_map}
#| fig-cap: The three climate regions of northern Vietnam.
#| fig-width: 11.25
#| fig-height: 7.5

vietnam_provinces <- vietnam_provinces |>
  arrange(region, province) |>
  mutate(climate_region = case_when(
    province %in% c("LAICHAU", "DIENBIEN", "SONLA") ~ "S1",
    province %in% c(
      "LAOCAI", "YENBAI", "HAGIANG", "CAOBANG", "TUYENQUANG",
      "BACKAN", "THAINGUYEN", "LANGSON", "BACGIANG", "QUANGNINH"
    ) ~ "S2",
    region %in% c("NMM", "RRD") ~ "S3",
    .default = NA
  ))

vietnam_provinces |>
  filter(region %in% c("RRD", "NMM")) |>
  ggplot(aes(fill = climate_region, label = province)) +
  geom_sf() +
  geom_sf_label(fill = "white") +
  scale_fill_viridis_d() +
  labs(x = "longitude", y = "latitude", fill = "climate region")
```

```{r fig-climate_regions}
#| fig-cap: Densities of maximum temperatures in the 13 provinces of the S3 climate region of Vietnam during the years 1987-2016.

library(tidyverse)
library(sf)
data(vietnam_temperature)
data(vietnam_regions)
data(vietnam_provinces)

vntcr <- vietnam_temperature |>
  filter(region %in% c("RRD", "NMM")) |>
  dplyr::select(year, province, t_max) |>
  left_join(vietnam_provinces, by = "province") |>
  st_as_sf() |>
  dplyr::select(year, climate_region, province, t_max) |>
  filter(climate_region == "S3") |>
  arrange(year, province)

vnt <- vntcr |>
  mutate(t_max = as_dd(t_max, lambda = 10, nbasis = 10, mc.cores = 15))
class(vnt$t_max) <- c("ddl", "fdl", "list")

vnt |> plot_funs(t_max, color = province) +
  facet_wrap(vars(year)) +
  labs(x = "temperature (deg. Celsius)", y = "density")
```

## Outlier detection using ICS

```{r fig-climate_regions_eigen}
#| fig-cap:
#|  - Scree plot of ICS eigenvalues.
#|  - Dual ICS eigendensities.
#|  - Shifting the mean in the direction of each dual ICS eigendensity.
#| fig-width: 7.5
#| fig-height: 5
#| layout-ncol: 2

icsout <- ICS_outlier(vnt$t_max, index = 1:2, n_cores = 14)

icsout$result |> ggplot(aes(index, gen_kurtosis, group = 1)) +
  geom_line(alpha = 0.5) +
  geom_point(aes(color = index, alpha = selected), size = 3) +
  theme_legend_inside_right +
  labs(x = "", y = "ICS eigenvalues") +
  guides(color = "none")

icsout$result |>
  filter(selected) |>
  plot_funs(H_dual, color = index) +
  geom_hline(yintercept = 1 / diff(icsout$result$H_dual[[1]]$basis$rangeval), linetype = "dotted") +
  labs(x = "temperature (deg. Celsius)", y = "density") +
  scale_color_manual(values = scales::pal_hue()(9)[1:2]) +
  theme_legend_inside

h_dual_shift <- c(3 * icsout$result$H_dual)
h_dual_shift$coefs <- sweep(h_dual_shift$coefs, 1, -c(mean(vnt$t_max))$coefs)
icsout$result |>
  mutate(H_dual_shift = as.list(h_dual_shift)) |>
  filter(selected) |>
  plot_funs(H_dual_shift, color = index) +
  geom_function(fun = function(x) eval(c(mean(vnt$t_max)), x), color = "black", linetype = "dotted") +
  scale_color_manual(values = scales::pal_hue()(9)[1:2]) +
  labs(x = "temperature (deg. Celsius)", y = "density") +
  theme_legend_inside
```

```{r fig-climate_regions_outliers}
#| fig-cap:
#|  - Outlying densities of maximum temperature in the provinces of the S3 climate region of Vietnam during the years 1987-2016.
#|  - Centred log-ratio transforms of the outlying centred densities of maximum temperature in the provinces of the S3 climate region of Vietnam during the years 1987-2016.
#| fig-width: 7.5
#| fig-height: 5
#| layout-ncol: 2

vnt <- vnt |>
  mutate(
    index = seq_len(nrow(icsout$scores)),
    outlying = as.factor(icsout$outliers),
    distances = icsout$ics_distances
  ) |>
  cbind(icsout$scores)

vnt |>
  mutate(year = as.factor(ifelse(outlying == 1, year, NA))) |>
  arrange(outlying) |>
  plot_funs(t_max, color = year, alpha = outlying) +
  theme_legend_inside +
  labs(
    x = "temperature (deg. Celsius)", y = "density",
    color = "outlying\nyears"
  ) +
  scale_color_discrete(limits = function(x) ifelse(is.na(x), "", x)) +
  guides(alpha = "none")

vnt |>
  mutate(
    t_max = as.fd(center(t_max)),
    year = as.factor(ifelse(outlying == 1, year, NA))
  ) |>
  arrange(outlying) |>
  plot_funs(t_max, color = year, alpha = outlying) +
  theme(legend.position = "none") +
  labs(
    x = "temperature (deg. Celsius)", y = "centred clr(density)",
    color = "outlying\nyears"
  )
```

```{r fig-climate_regions_outliers_years}
#| fig-cap:
#|  - Outlying densities of maximum temperature in the provinces of the S3 climate region of Vietnam during the years 1987-2016.
#|  - Centred log-ratio transforms of the outlying centred densities of maximum temperature in the provinces of the S3 climate region of Vietnam during the years 1987-2016.

vnt |>
  mutate(province = ifelse(outlying == 1, province, NA)) |>
  arrange(outlying) |>
  plot_funs(t_max, color = province, alpha = outlying) +
  facet_wrap(vars(year)) +
  labs(
    x = "temperature (deg. Celsius)", y = "density",
    color = "outlying\nprovinces"
  ) +
  scale_color_discrete(limits = function(x) ifelse(is.na(x), "", x)) +
  guides(alpha = "none")

vnt |>
  mutate(
    t_max = as.fd(center(t_max)),
    province = ifelse(outlying == 1, province, NA)
  ) |>
  arrange(outlying) |>
  plot_funs(t_max, color = province, alpha = outlying) +
  facet_wrap(vars(year)) +
  labs(
    x = "temperature (deg. Celsius)", y = "centred clr(density)",
    color = "outlying\nprovinces"
  ) +
  scale_color_discrete(limits = function(x) ifelse(is.na(x), "", x)) +
  guides(alpha = "none")
```

```{r fig-climate_regions_distances}
#| fig-cap: ICS distances of the densities of maximum temperature in the provinces of the S3 climate region of Vietnam during the years 1987-2016.
#| fig-width: 7.5
#| fig-height: 5

vnt |>
  mutate(province = ifelse(outlying == 1, province, NA)) |>
  ggplot(aes(year, distances, color = province, label = year)) +
  geom_text() +
  scale_color_discrete(limits = function(x) ifelse(is.na(x), "", x)) +
  geom_hline(yintercept = icsout$ics_dist_cutoff) +
  labs(color = "outlying\nprovinces")
```

```{r fig-climate_regions_scatter}
#| fig-cap: Selected invariant coordinates of the densities of maximum temperature in the provinces of the S3 climate region of Vietnam during the years 1987-2016.
#| fig-width: 7.5
#| fig-height: 5

vnt |>
  mutate(province = ifelse(outlying == 1, province, NA)) |>
  ggplot(aes(IC.1, IC.2)) +
  scale_color_discrete(limits = function(x) ifelse(is.na(x), "", x)) +
  geom_text(aes(color = province, label = year)) +
  labs(color = "outlying\nprovinces")
```

## Influence of the preprocessing parameters

Now let us apply ICS for outlier detection on the same dataset
but with different smoothing parameters.

```{r tbl-climate_regions_grid}
#| tbl-cap: Dimensions of the grid of preprocessing parameters.

knots_pos_seq <- "quantiles"
nknots_seq <- 5 * 1:5
lambda_seq <- 10^(-2:2)
index_seq <- c(2, NA)

param_grid <- expand.grid(
  knots_pos = knots_pos_seq,
  nknots = nknots_seq,
  lambda = lambda_seq,
  index = index_seq
) |>
  arrange(nknots, knots_pos, lambda)

knitr::kable(
  tibble(
    `# of knots positions` = length(knots_pos_seq),
    `# of # of knots` = length(nknots_seq),
    `# of values for lambda` = length(lambda_seq),
    `# of # of components` = length(lambda_seq),
    `# of values for index` = length(index_seq),
    `Total grid size` = nrow(param_grid)
  )
)

if (!file.exists("ICS_climate_regions.RData")) {
  system.time(
    ics_grid <- param_grid |>
      mutate(id = seq_len(n())) |>
      rowwise() |>
      mutate(res = list(smooth_ICS(vntcr, knots_pos, nknots, lambda, index)))
  )
  save(ics_grid, file = "ICS_climate_regions.RData")
}

load("ICS_climate_regions.RData")

ics_grid_out <- ics_grid |>
  rowwise() |>
  filter(!(any(class(res$ics_out) == "error"))) |>
  mutate(res = list(data.frame(
    obs_id = seq_len(length((res$ics_out$outliers))),
    outlying = res$ics_out$outliers == 1
  ))) |>
  unnest(res)
```

```{r fig-climate_regions_grid_outliers}
#| fig-cap: "Outlier detection using ICS on the S3 climate region of Vietnam, during the years 1987-2016, over a grid of preprocessing parameters. Top: 2 invariant components selected; bottom: automatic selection through D’Agostino tests. Columns correspond to the number of inside knots (5-25)."
#| fig-width: 11.25
#| fig-height: 7.5

ics_grid_out |>
  mutate(index = ifelse(is.na(index), "auto. selection of ICs",
    paste(index, "ICs selected")
  )) |>
  ggplot(aes(log10(lambda), obs_id, fill = outlying, alpha = outlying)) +
  geom_tile() +
  scale_fill_grey(start = 1, end = 0) +
  facet_grid(cols = vars(nknots), rows = vars(index)) +
  labs(y = "observation index")

ics_grid_out |>
  mutate(index = ifelse(is.na(index), "auto. selection of ICs",
    paste(index, "ICs selected")
  )) |>
  rename(index_select = index) |>
  left_join(vnt |> mutate(obs_id = row_number()) |> select(!outlying), by = c("obs_id")) |>
  group_by(nknots, lambda, index_select, year) |>
  mutate(n_outlying = sum(outlying) / 13) |>
  ggplot(aes(log10(lambda), year, fill = n_outlying, alpha = n_outlying)) +
  geom_tile() +
  scale_alpha_continuous(range = c(0, 1)) +
  scale_fill_gradient(low = "white", high = "black") +
  facet_grid(cols = vars(nknots), rows = vars(index_select)) +
  labs(y = "year", fill = "outlier\nfrequency", alpha = "") +
  guides(alpha = "none")

ics_grid |>
  filter(is.na(index)) |>
  mutate(`number of selected ICs` = max(res$ics_out$index)) |>
  ggplot(aes(log10(lambda), `number of selected ICs`)) +
  geom_bar(stat = "identity") +
  facet_grid(cols = vars(nknots))
```

```{r tbl-climate_regions_grid_summary}
#| tbl-cap: Outlier detection using ICS on the S3 climate region of Vietnam, during the years 1987-2016, over a grid of preprocessing parameters.

ics_grid_summary <- ics_grid_out |>
  mutate(outlying = ifelse(outlying, 1, 0)) |>
  group_by(obs_id) |>
  summarise(n_outlying = sum(outlying)) |>
  left_join(vnt |> mutate(obs_id = row_number()), by = c("obs_id")) |>
  select(obs_id, province, year, n_outlying)

rmarkdown::paged_table(ics_grid_summary)
```

```{r fig-climate_regions_grid_summary}
#| fig-cap: Outlier detection using ICS on the S3 climate region of Vietnam, during the years 1987-2016, over a grid of preprocessing parameters.
#| fig-width: 11.25
#| fig-height: 7.5

ics_grid_summary |>
  ggplot(aes(year, n_outlying)) +
  geom_bar(stat = "identity") +
  labs(y = "outlier detection frequency")
```

## Constraining the centred log-ratio transforms to zero on the boundaries

If we force to 0 the first and last ZB-spline coordinates of the $\operatorname{clr}$,
we project them onto the space of splines constrained to $0$ on the
boundaries of the interval.

```{r fig-climate_regions_zero_boundary}
#| fig-cap: Outlier detection using ICS on the S3 climate region of Vietnam, with centred log-ratio transforms constrained to 0 on the boundaries.

boundary_to_zero <- function(x) {
  b <- x$basis
  p <- b$nbasis
  zbsp <- fd(to_zbsplines(inv = TRUE, coefs = diag(p - 1), basis = b), b)
  plot(as.list(zbsp))

  y <- to_zbsplines(x)
  y[c(1, p - 1), ] <- 0
  yfd <- fd(to_zbsplines(inv = TRUE, coefs = y, basis = b), b)

  list(dd = yfd, coefs = t(y[2:(p - 2), ]))
}
icsout <- ICS_outlier(boundary_to_zero(c(vnt$t_max))$coefs)

vnt |>
  mutate(
    t_max = as.list(as.fd(boundary_to_zero(c(t_max))$dd)),
    outlying = icsout$outliers == 1,
    province = ifelse(outlying == 1, province, NA)
  ) |>
  plot_funs(t_max, color = province, alpha = outlying) +
  facet_wrap(vars(year)) +
  scale_color_discrete(limits = function(x) ifelse(is.na(x), "", x)) +
  labs(
    x = "temperature (deg. Celsius)", y = "clr(density)",
    color = "outlying\nprovinces"
  )
```

# Comparison with other methods

See [this vignette from `fdaoutlier`](https://cran.r-project.org/web/packages/fdaoutlier/vignettes/simulation_models.html) for more details about simulation models.

```{r fig-comparison_schemes, message = FALSE}
#| fig-cap: Generation schemes for density data with outliers
#| fig-height: 5

set.seed(928)
schemes <- c("GP_clr", "Gumbel", "GP_margin")

simulation_gp_clr <- function(n, p = 200) {
  sim <- fdaoutlier::simulation_model4(n, p, outlier_rate = 0.02)
  y <- exp(tfd(sim$data, arg = seq(0, 1, length.out = p)))

  list(
    data = as.matrix(y / tf_integrate(y)),
    true_outliers = replace(integer(100), sim$true_outliers, 1)
  )
}

dgumbel <- function(x, mu = 0, beta = 1) {
  z <- (x - mu) / beta
  exp(-z - exp(-z)) / beta
}

simulation_gumbel <- function(n, p = 200, outlier_rate = 0.02, deterministic = TRUE) {
  tt <- seq(0, 1, length.out = p)
  a <- matrix(rnorm(n, sd = 0.01), nrow = p, ncol = n, byrow = TRUE)
  b <- matrix(rnorm(n, sd = 0.01), nrow = p, ncol = n, byrow = TRUE)
  y <- dgumbel(tt, mu = 0.25 + a, beta = 0.05 + b)
  dtt <- fdaoutlier:::determine(deterministic, n, outlier_rate)
  n_outliers <- dtt$n_outliers
  true_outliers <- dtt$true_outliers
  if (n_outliers > 0) {
    a <- matrix(rnorm(n_outliers, sd = 0.01),
      nrow = p, ncol = n_outliers, byrow = TRUE
    )
    b <- matrix(rnorm(n_outliers, sd = 0.01),
      nrow = p, ncol = n_outliers, byrow = TRUE
    )
    y[, true_outliers] <- dgumbel(tt, mu = 0.32 + a, beta = 0.05 + b)
  }
  return(list(
    data = t(y),
    true_outliers = replace(integer(100), true_outliers, 1)
  ))
}

simulation_gp_margin <- function(n, p = 200) {
  sim <- fdaoutlier::simulation_model5(n, p, outlier_rate = 0.02)
  sim$data <- (sim$data - min(sim$data)) / diff(range(sim$data))
  y <- tibble(f = split(sim$data, row(sim$data))) |>
    mutate(f = as_dd(f, lambda = 1, nbasis = 10, mc.cores = 14))

  list(
    data = t(eval(c(y$f), seq(min(sim$data), max(sim$data), length.out = p))),
    true_outliers = replace(integer(100), sim$true_outliers, 1)
  )
}

generate_data <- function(scheme, n = 100) {
  print(paste("Generating", scheme, "data"))
  switch(scheme,
    "GP_clr" = simulation_gp_clr(n),
    "Gumbel" = simulation_gumbel(n),
    "GP_margin" = simulation_gp_margin(n)
  )
}

tibble(Scheme = schemes) |>
  mutate(sim = map(Scheme, generate_data)) |>
  mutate(sim = map(sim, function(x) {
    tibble(
      data = tfd(x$data, arg = seq(0, 1, length.out = ncol(x$data))),
      `true outlier` = as.character(x$true_outliers == 1)
    )
  })) |>
  unnest(sim) |>
  arrange(`true outlier`) |>
  ggplot() +
  scale_colour_manual(values = c("TRUE" = "red", "FALSE" = "grey")) +
  geom_spaghetti(aes(y = data, color = `true outlier`, linetype = `true outlier`)) +
  facet_wrap(~Scheme) +
  labs(y = "density")
```

```{r fig-comparison_methods, message = FALSE}
#| fig-cap: ROC Curves for Outlier Detection Methods
#| fig-height: 5

methods <- c("ICS", "ICS_L2", "LQD", "Wasserstein", "MBD")
N <- 100 # Number of repetitions per combination

if (!(file.exists("ICS_comparison.RData"))) {
  method_ics <- function(data) {
    u <- fda.usc::fdata(log(pmax(data, 1e-8)), argvals = seq(0, 1, length.out = ncol(data))) |>
      fda.usc::fdata2fd()
    for (i in integer(3)) {
      u$coefs <- sweep(u$coefs, 2, fda::inprod(u) / diff(u$basis$rangeval))
    }
    if (any(is.nan(u$coefs))) stop("ICS preprocessing has failed for at least one density")
    ICS_outlier(u, n_cores = 14)$ics_distances
  }

  method_ics_l2 <- function(data) {
    f <- fda.usc::fdata(data, argvals = seq(0, 1, length.out = ncol(data))) |>
      fda.usc::fdata2fd()
    ICS_outlier(f, n_cores = 14)$ics_distances
  }

  method_deboinr <- function(data, distance) {
    density_order <- deboinr(
      x_grid = seq(0, 1, length.out = ncol(data)),
      densities_matrix = data,
      distance = distance,
      num_cores = 14
    )$density_order
    n <- nrow(data)
    density_order <- density_order[density_order <= n]
    scores <- integer(n)
    scores[density_order] <- seq_len(n)
    scores
  }

  outlier_score <- function(method, data) {
    print(paste("Computing outlier scores with", method))
    tryCatch(switch(method,
      "ICS" = method_ics(data),
      "ICS_L2" = method_ics_l2(data),
      "LQD" = method_deboinr(data, distance = "nLQD"),
      "Wasserstein" = method_deboinr(data, distance = "wasserstein"),
      "MBD" = method_deboinr(data, distance = "MBD_fboxplot")
    ), error = function(e) NA)
  }

  compute_roc <- function(scores, true_outliers) {
    thresholds <- c(scores, max(scores) + 1)
    tibble(threshold = thresholds) |>
      mutate(
        TP = map_int(threshold, ~ sum(scores >= .x & true_outliers)),
        FP = map_int(threshold, ~ sum(scores >= .x & !true_outliers)),
        FN = map_int(threshold, ~ sum(scores < .x & true_outliers)),
        TN = map_int(threshold, ~ sum(scores < .x & !true_outliers)),
        PP = map_int(threshold, ~ sum(scores >= .x)),
        TPR = TP / (TP + FN),
        FPR = FP / (FP + TN),
      ) |>
      select(TPR, FPR, PP)
  }

  system.time(
    comparison <- crossing(Scheme = schemes, Method = methods, Simulation = 1:N) |>
      mutate(sim = map(Scheme, generate_data)) |>
      unnest_wider(sim) |>
      mutate(
        scores = map2(Method, data, outlier_score),
        roc = map2(scores, true_outliers, compute_roc)
      ) |>
      unnest(roc) |>
      select(!data)
  )
  save(comparison, file = "ICS_comparison.RData")
}

load("ICS_comparison.RData")

# Aggregate results (averaging over simulations)
comparison_avg <- comparison |>
  group_by(Scheme, Method, PP) |>
  summarize(
    TPR = mean(TPR),
    FPR = mean(FPR),
    .groups = "drop"
  )

ggplot(comparison_avg, aes(FPR, TPR, color = Method, group = Method)) +
  geom_line() +
  geom_function(fun = identity, linetype = "dotted") +
  facet_grid(~Scheme) +
  coord_fixed() +
  labs(
    x = "False Positive Rate (FPR)",
    y = "True Positive Rate (TPR)",
  )
```


# 10 periods, 2 regions (26 provinces)

We compute an average density by province and by period of 3 years.
There are 10 periods total, and only 26 provinces in the two northern
regions of Vietnam, so 260 observations total.

## Data presentation

```{r ten_periods_preprocessing}
data(vietnam_temperature)
data(vietnam_regions)

vietnam_temperature <- vietnam_temperature |>
  select(!t_min) |>
  mutate(period = year - (year - min(year)) %% 3)

if (file.exists("ICS_ten_periods.RData")) {
  load("ICS_ten_periods.RData")
} else {
  vnt <- vietnam_temperature |>
    filter(region %in% c("RRD", "NMM")) |>
    mutate(t_max = as_dd(t_max, lambda = 10, nbasis = 10, mc.cores = 15)) |>
    group_by(region, province, period) |>
    summarise(t_max = list(c(mean(t_max)))) |>
    ungroup() |>
    left_join(vietnam_regions, by = c("region" = "code")) |>
    rename(region_name = name) |>
    arrange(region, province, period)
  class(vnt$t_max) <- c("ddl", "fdl", "list")
}
```

```{r fig-ten_periods}
#| fig-cap: Densities of maximum temperature in the two northern regions of Vietnam averaged over three-year periods.

vnt |> plot_funs(t_max, color = province) +
  facet_wrap(vars(period)) +
  labs(x = "temperature (deg. Celsius)", y = "density")
```

## Outlier detection using ICS


```{r fig-ten_periods_outliers}
#| fig-cap:
#|  - Selected invariant components of the densities of maximum temperature in the two northern regions of Vietnam averaged over three-year periods.
#|  - Outlying densities of maximum temperature in the two northern regions of Vietnam averaged over three-year periods.

if (!(file.exists("ICS_ten_periods.RData"))) {
  icsout <- ICS_outlier(vnt$t_max, index = 1:4, n_cores = 14)

  vnt <- vnt |>
    mutate(outlying = as.factor(icsout$outliers)) |>
    cbind(icsout$scores)
  save(icsout, vnt, file = "ICS_ten_periods.RData")
}

vnt |> plot_matrix(paste0("IC.", 1:4),
  label = period,
  color = ifelse(outlying == 1, province, NA),
  alpha = outlying == 1
) +
  labs(color = "outlying\nprovinces", x = "", y = "") +
  scale_color_discrete(limits = function(x) ifelse(is.na(x), "", x)) +
  guides(alpha = "none")

vnt |>
  mutate(province = ifelse(outlying == 1, province, NA)) |>
  arrange(outlying) |>
  plot_funs(t_max, color = province, alpha = outlying) +
  facet_wrap(vars(period)) +
  labs(
    x = "temperature (deg. Celsius)", y = "density",
    color = "outlying\nprovinces"
  ) +
  scale_color_discrete(limits = function(x) ifelse(is.na(x), "", x)) +
  guides(alpha = "none")
```
